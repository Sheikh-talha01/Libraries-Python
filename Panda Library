# this repo includes all the code related to Pandas library in Python

import numpy as np
import pandas as pd
dict1 = {
    "Name" : ["Talha" , "Sheikh" , "Ali" , "Fahad" , " Saleem"] , 
    "Age" : [20, 21 , 22, 19 , 7] ,
    "City" : ["Mansehra", "Karachi" , "Lahore" , "Qalandarabad" , "Abbottabad" ] , 
    "Marks" : [99, 88, 45, 76 , 67 ]
}

# DataFrame() function will convert simple data to datasheet
# DataFrame must be in camel format
a = pd.DataFrame(dict1)
a
# Output->   
	Name	Age	  City	       Marks
0	Talha	20	 Mansehra	    99
1	Sheikh	21	 Karachi	    88
2	Ali	    22	 Lahore	        45
3	Fahad	19	 Qalandarabad   76
4	Saleem	7	 Abbottabad	    67

# csv  stands for comma separated values
# csv files is sheet of comma sepated values 

# import data to MS Excel datasheet
# to_csv('filename.extension') function will be used 
a.to_csv('friends.csv')

# if we don't want first column then
a.to_csv('friends_index_false.csv' , index = False) 
# Output-> 
	Name	 Age	    City	     Marks
0	Talha	 20	    Mansehra	 99
1	Sheikh	 21	    Karachi	     88

a.head(3)
# Output-> 
    Name	 Age 	City	     Marks
0	Talha	 20	    Mansehra	 99
1	Sheikh	 21	    Karachi  	 88
2	Ali	     22	    Lahore  	 45

# F in False must be capital in python
# first column (serial No ) will be accessed by index = True

# we can access values of any column by column name and can access row by index number


# wanna see starting two rows then  .head()  function is used
# Often used when data is too large like more than 100 rows and then we wanna see starting some rows
df.head(2)

# Wanna see ending rows of given dataset then .tail()  function is used
df.tail(2)

# to read data from csv sheet then
# pd.read_csv('filename.csv') when file is in the same folder 
# pd.read_csv('file_path.csv') when file is not in the same folder then we have to give complete file path and change backward salshes into forward slashes
# Example
b = pd.read_csv('sheikh_.csv')


# to read data / import excel file then we have to import openpyxl library

# for statistical analysis of columns having numerical values then .describe()  function is used
b.describe()

# # to access specific column e.g marks
b['marks']

# To access specific value from specific column
b['marks'][0]

# To change specific value or overwrite
b['marks'][0] = 3

b
