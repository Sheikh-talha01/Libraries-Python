# This repo includes code related to Numpy library
# Numpy is short form of Numerical Python

import numpy as np

# np.array() this function will create an array(space separated) of list( comma separated

arr = np.array([3,5,4,7,8])
print(arr)
# Output->       [3 5 4 7 8]

print(type(arr))
# Output ->      <class 'numpy.ndarray'>

# for multiple dimendion array like matrices

arr2 = np.array( [ [ 22,33,44,55 ] , [ 66, 77, 88, 99 ] , [ 32, 43, 54,65 ] ] )
print(arr2)
# Output-> [[22 33 44 55]
           [66 77 88 99]
           [32 43 54 65]]

# for multiple dimension array all the lists have same No of values( because in matrices every row have same No of columns )
# in the main list otherwise will throw an error .We can extend the dimensions of array by adding comma and then by adding list 
# having same No of values as others

# Slicing in Numpy
   
# Slicing in One dimensional array

arr3 = np.array( [ 2,4,6,8,7,5,3,1 ] )
print ( arr3[ 0: 4 ] ) 
# Output-> [2 4 6 8]

print( arr3 [ : 4 ] )
print ( arr3 [ 0 : ] )
# Output-> [2 4 6 8]
           [2 4 6 8 7 5 3 1]

print ( arr3 [ -1 : ] )
# Output-> [1]

print ( arr3 [ -4 : -1 ])
# Output-> [7 5 3]

print ( arr3 [-4 : ] )
print ( arr3 [ : -1 ] )
# Output-> [7 5 3 1]
           [2 4 6 8 7 5 3]

# Slicing in Multi Dimensional array

arr4 = np.array( [ [ 1,3,5,7,9] , [ 0,2,4,6,8 ] ] )
print( arr4 [ 0:2 , 0:3 ] ) 
# Output-> [[1 3 5]
           [0 2 4]]

# Wanna access a single element form multidimensional array

print ( arr4 [ 0, 1:3 ] )
# Output->    [3 5]

print ( arr4 [ 0 ] )
# Output->   [1 3 5 7 9]

print ( arr4 [ 1, 1:3 ] )
# Output-> [2 4]

print (arr4 [ 1,1 ] )
2

# for checking No of elements in an array
arr5 = np.array( [2,3,4] )
print(arr5.size)
# Output-> 3

arr6 = np.array ( [ [ 2,3,4] , [5,6,7] ] )
print(arr6.size)
# Output-> 6

# To check No of nested elements 
arr5 = np.array( [2,3,4] )
print(len(arr5))
# Output-> 3

arr6 = np.array ( [ [ 2,3,4] , [5,6,7] ] )
print(len(arr6))
# Output-> 2

# To check type of array
print( type(arr5))
# Output->    <class 'numpy.ndarray'>

# To check type of datatype used in array
print ( arr5.dtype)
# Output->    int64

# To change datatype in array
# But string datatype can not be converted into int or float 
print( arr5.astype(float))
print( arr5.astype(str))
# Output->    [2.0 3.0 4.0]
# Output->    ['2' '3' '4']

# To check No of columns and rows .shape() function will be used
print( arr6.shape)
# Output->    (2, 3)

# Mathematical Operations and Functions on array

# Addition for one dimensional array
arr7 = np.array( [ 1,2,3,4,5] )
arr8 = np.array ( [ 6,7,8,9,5] )
print( arr7 + arr8 )
print( np.add(arr7, arr8 ) )
# Output-> [ 7  9 11 13 10]
# Output-> [ 7  9 11 13 10]

# Addition for multi dimensional array

#Subtraction
arr7 = np.array( [ 1,2,3,4,5] )
arr8 = np.array ( [ 6,7,8,9,5] )
print( arr8 - arr7 )
print ( np.subtract(arr8, arr7))
# Output->       [5 5 5 5 0]
# Output->       [5 5 5 5 0]

# Multiply
arr7 = np.array( [ 1,2,3,4,5] )
arr8 = np.array ( [ 2,2,2,2,2] )
print( arr8 * arr7 )
print ( np.multiply(arr8, arr7))
# Output->       [ 2  4  6  8 10]
# Output->       [ 2  4  6  8 10]

# Divide
arr7 = np.array( [ 1,2,3,4,5] )
arr8 = np.array ( [ 2,2,2,2,2] )
print( arr8 / arr7 )
print ( np.divide(arr8, arr7))
# Output->     [2.         1.         0.66666667 0.5        0.4       ]
# Output->     [2.         1.         0.66666667 0.5        0.4       ]

# Power
arr9 = np.array([2])
arr7 = np.array( [ 1,2,3,4,5] ) 
print( np.power( arr7, arr9 ) )
# Output->     [ 1  4  9 16 25]

# SQRT
arr7 = np.array( [ 1,2,3,4,5] ) 
print( np.sqrt( arr7 ) )
# Output->     [1.         1.41421356 1.73205081 2.         2.23606798]

# Combining and Spliting Arrays

# Concatenation without using numpy library
first = [ 2 , 3, 4, 5]
second = [ 6, 7, 8, 9]
print( first +  second)
# Output->     [2, 3, 4, 5, 6, 7, 8, 9]

# Concatenation  using numpy library
arr7 = np.array( [ 1,2,3,4,5] )
arr8 = np.array ( [ 2,2,2,2,2] )
# Output->     print( np.concatenate( [arr7, arr8] ))


[1 2 3 4 5 2 2 2 2 2]

