# this repo includes all the code related to Pandas library in Python

import numpy as np
import pandas as pd
dict1 = {
    "Name" : ["Talha" , "Sheikh" , "Ali" , "Fahad" , " Saleem"] , 
    "Age" : [20, 21 , 22, 19 , 7] ,
    "City" : ["Mansehra", "Karachi" , "Lahore" , "Qalandarabad" , "Abbottabad" ] , 
    "Marks" : [99, 88, 45, 76 , 67 ]
}

# DataFrame() function will convert simple data to datasheet
# DataFrame must be in camel format
a = pd.DataFrame(dict1)
a
# Output->   
	Name	Age	  City	       Marks
0	Talha	20	 Mansehra	    99
1	Sheikh	21	 Karachi	    88
2	Ali	    22	 Lahore	        45
3	Fahad	19	 Qalandarabad   76
4	Saleem	7	 Abbottabad	    67

# csv  stands for comma separated values
# csv files is sheet of comma sepated values 

# import data to MS Excel datasheet
# to_csv('filename.extension') function will be used 
a.to_csv('friends.csv')

# if we don't want first column then
a.to_csv('friends_index_false.csv' , index = False) 


# F in False must be capital in python
# first column (serial No ) will be accessed by index = True

# we can access values of any column by column name and can access row by index number


# wanna see starting two rows then  .head()  function is used
# Often used when data is too large like more than 100 rows and then we wanna see starting some rows
df.head(2)
# Output-> 
	Name	 Age	    City	     Marks
0	Talha	 20	    Mansehra	     99
1	Sheikh	 21	    Karachi	     88

a.head(3)
# Output-> 
        Name	 Age 	    City	 Marks
0	Talha	 20	    Mansehra	 99
1	Sheikh	 21	    Karachi  	 88
2	Ali	 22	    Lahore  	 45

# Wanna see ending rows of given dataset then .tail()  function is used
df.tail(2)
# Output-> 
	Name	Age	City	        Marks
3	Fahad	19	Qalandarabad	76
4	Saleem	7	Abbottabad	67

# By default pd.tail() and pd.head() function takes 5 as an argument

# to read data from csv sheet then
# pd.read_csv('filename.csv') when file is in the same folder 
# pd.read_csv('file_path.csv') when file is not in the same folder then we have to give complete file path and change backward salshes into forward slashes
# Example
b = pd.read_csv('sheikh_.csv')


# to read data / import excel file then we have to import openpyxl library
c = pd.read_excel ("second.xlsx")
print(c)

# for statistical analysis of columns having numerical values then .describe()  function is used
b.describe()
# Output-> 
	Age	        Marks
count	5.000000	5.000000
mean	17.800000	75.000000
std	6.140033	20.676073
min	7.000000	45.000000
25%	19.000000	67.000000
50%	20.000000	76.000000
75%	21.000000	88.000000
max	22.000000	99.000000


# # to access specific column e.g marks
b['marks']
# Output-> 
0    99.0
1    88.0
2    89.0
3    98.0
4    78.0
5     8.0
6    87.0
7     NaN
8     NaN
Name: marks, dtype: float64

# To access specific value from specific column
b['marks'][0]
# Output-> 
np.float64(99.0)

# To change specific value or overwrite
b['marks'][0] = 3
print(b)
# Output->
	age	marks	Unnamed: 2
0	23.0	3.0	NaN
1	32.0	88.0	NaN
2	34.0	89.0	NaN
3	33.0	98.0	NaN
4	43.0	78.0	NaN
5	45.0	8.0	NaN
6	65.0	87.0	NaN
7	NaN	NaN	NaN
8	NaN	NaN	NaN

# To change index No 
b.index = ["first", "second", "third", "forth", "fifth", "sixth", "seventh", "eight", "ningth"]
print(b)
# Output->
	age	marks	Unnamed: 2
first	23.0	3.0	NaN
second	32.0	88.0	NaN
third	34.0	89.0	NaN
forth	33.0	98.0	NaN
fifth	43.0	78.0	NaN
sixth	45.0	8.0	NaN
seventh	65.0	87.0	NaN
eight	NaN	NaN	NaN
ningth	NaN	NaN	NaN

# To get info about data
print(d.info() )
# Output-> 
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 9 entries, 0 to 8
Data columns (total 3 columns):
 #   Column      Non-Null Count  Dtype  
---  ------      --------------  -----  
 0   age         7 non-null      float64
 1   marks       7 non-null      float64
 2   Unnamed: 2  0 non-null      float64
dtypes: float64(3)
memory usage: 348.0 bytes
None

# For statistical analysis of data a.describe() function will be used
# For getting general info about data a.info() function will be used

# To check null values in every column
print( d.isnull().sum() )
# Output-> 
age           2
marks         2
Unnamed: 2    9
dtype: int64

# To check duplicate values
print( d["age"].duplicated().sum() )
# Output->      1

# Duplicate function will use when we are dealing with duplicate values and wanna find it then we will find it from a unique column/serial No/ RollNo
print( d.duplicated().sum() )
# Output->    
1

# For drop duplicate values drop_duplicates("column_name") function will be used
print(d.drop_duplicates( "age" ) )
# Output->
  age  marks
0   23     99
1   32     88
2   34     89
3   33     98
4   43     78
5   45      8
6   65     87

# When working with large data then .dropna() function will be used But we have to know that 
# in every scenario we are not supposed to use this function e.g in a company while dealing with 
# duplicate data, if we use this function then this will remove some data at the end we are required
# count the total employee then there will be ambiguity in results.
print( d.dropna())
# Output-> 
   age  marks
0   23     99
1   32     88
2   34     89
3   33     98
4   43     78
5   45      8
6   65     87
7   43      2

# Replacing nan(not a number) values 
import numpy as np
print( d.replace(np.nan, "hello" ) ) # but this will replace all the nan values( int/string/float/char) with hello(string)

# For Replacing specific value d["column_name"].replace(np.nan, new_value) )
print( d["age"].replace(np.nan, 18 ) )
 # OR 
_c = d["age"].replace(np.nan, 18 )
print(_c)

# Best approch to replace data of int/float type is first find mean of data(int/float)
# column having nan values and then replace nan values with mean this not affect data
print(d["age"].mean() )
# Output->    39.75
print( d["age"].replace( np.nan, 39.75 ) )

# Best approch to replace data of string type is using backward fill or forward fill method
print( a.fillna( method = "bfill" ) )    # bfill is backward fill
# OR print( a.fillna( method = "ffill" ) )   # ffill is forward fill  

# Column Transformation in Pandas
d.loc[ ( d  ["age %" ] == 0), "new_age"  ]= 18 
d.loc[ ( d  ["age %" ] > 0), "new_age"  ]= 19 


f = pd.read_excel ('sheikh.xlsx' )
print ( f )
# Output->    
  First Name Last Name  age  marks
0      Talha    Sheikh   23     99
1      Azeem      Azam   32     88
2     Saleem    Shokat   34     89
3     Kaleem    Faheem   33     98
4    Shakeel      Niaz   43     78
5       Faiz      Umar   45      8
6       Riaz     Usman   65     87

# Combining two columns
f["Full Name"] = f["First Name"] +" " + f[ "Last Name" ]
print ( f )
# Output->  
     First Name   Last Name  age   marks      Full Name
0      Talha       Sheikh     23     99     Talha Sheikh
1      Azeem       Azam       32     88     Azeem Azam
2      Saleem      Shokat     34     89     Saleem Shokat
3      Kaleem      Faheem     33     98     Kaleem Faheem
4      Shakeel     Niaz       43     78     Shakeel Niaz
5      Faiz        Umar       45      8     Faiz Umar
6      Riaz        Usman      65     87     Riaz Usman

f["Full Name"] = f["First Name"].str.capitalize() +" " + f[ "Last Name" ].str.capitalize()
print ( f )
# Output->
    First Name    Last Name  age  marks      Full Name
0      Talha      Sheikh     23     99     Talha Sheikh
1      Azeem      Azam       32     88     Azeem Azam
2      Saleem     Shokat     34     89     Saleem Shokat
3      Kaleem     Faheem     33     98     Kaleem Faheem
4      Shakeel    Niaz       43     78     Shakeel Niaz
5      Faiz       Umar       45      8     Faiz Umar

f["Percentage"] = f["marks"]/100
print(f)
# Output->
  First Name Last Name  age  marks      Full Name  Percentage
0      Talha    Sheikh   23     99   Talha Sheikh        0.99
1      Azeem      Azam   32     88     Azeem Azam        0.88
2     Saleem    Shokat   34     89  Saleem Shokat        0.89
3     Kaleem    Faheem   33     98  Kaleem Faheem        0.98
4    Shakeel      Niaz   43     78   Shakeel Niaz        0.78
5       Faiz      Umar   45      8      Faiz Umar        0.08
6       Riaz     Usman   65     87     Riaz Usman        0.87


# Make a new column from existing one and also make a function to implement function on all the values once
h = { "Months" : 
    [ "January", "Febuary", "March", "April",
     "May", "June", "July", "August", "September", 
     "October", "November ", "December" ]  }
_h = pd.DataFrame(h)
print (_h,"\n")

def extract(value):
    return value[0:3]
_h["Short_Months" ] = _h["Months"].map(extract)
print(_h)
# Output->
      Months     Short_Months
0     January       Jan
1     Febuary       Feb
2     March         Mar
3     April         Apr
4     May           May
5     June          Jun
6     July          Jul
7     August        Aug
8     Septembe      Sep
9     October       Oct
10    November      Nov
11    December      Dec

# To check summary of data .groupby("column_name").agg( {"coumn_name": "count"})  function will be used
print ( f.groupby("Gender").agg( {"Full Name": "count"}) )
# Output->
         Full Name
Gender           
female          6
male            7

# To check summary of data .groupby("column_name").agg( {"coumn_name": "count"})  function will be used
# Single Parameter
print ( f.groupby([ "Gender", "Country"]).agg( {"Full Name": "count"}) )
# Output->
              Full Name
Gender  Country               
female  Afghanistan          3
        Bangladesh           3
male    India                2
        Netherland           1
        Pakistan             3
        Srilanka             1

# Single Parameter
print ( f.groupby([ "Gender", "Country"]).agg( {"age": "mean"}) )
# Output->
            age
Gender  Country               
female  Afghanistan  20.333333
        Bangladesh   36.000000
male    India        33.500000
        Netherland   65.000000
        Pakistan     33.333333
        Srilanka     43.000000

# Single Parameter
print ( f.groupby([ "Gender", "Country"]).agg( {"age": "max"}) )
# Output->
          age
Gender  Country         
female  Afghanistan   31
        Bangladesh    59
male    India         34
        Netherland    65
        Pakistan      45
        Srilanka      43

# Double Parameter
print ( f.groupby([ "Gender", "Country"]).agg( {"age": "max", "marks" : "max"}) )
# Output->
          age  marks
Gender  Country                
female  Afghanistan   31     82
        Bangladesh    59     92
male    India         34     98
        Netherland    65     87
        Pakistan      45     99
        Srilanka      43     78

