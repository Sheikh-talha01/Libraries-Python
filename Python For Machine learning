import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

plt.quiver( 0,0, 4,5 )

plt.quiver( 0,0, 4,5, scale_units='xy', angles='xy', scale=1 )
plt.xlim(-5,5)
plt.ylim(-5,5)
plt.show()

# Showing 2 vectors in same graph
plt.quiver( 0,0, 5,6, scale_units='xy', angles= 'xy', scale = 1, color = 'b')
plt.quiver( 0,0,-2,-4, scale_units='xy', angles= 'xy', scale = 1, color = 'r')
plt.xlim(-8,8)
plt.ylim(-8,8)
plt.show()

# Addition of vectors
vec1 = np.asarray([0,0, 2,3])
vec2 = np.asarray([0,0, 5,6])
vec_sum = vec1 + vec2
print(vec_sum)

plt.quiver( 0,0, 2,3, scale_units='xy', scale=1, color= 'r')
plt.xlim(-8,8)
plt.ylim(-8,8)
plt.show()

plt.quiver( 0,0, 2,3, scale_units='xy', angles = 'xy', scale=1, color= 'r')
plt.quiver( 0,0, 5,-2, scale_units='xy', angles = 'xy', scale=1, color= 'b')
plt.quiver( 0,0, 7,1, scale_units='xy', angles = 'xy', scale=1, color= 'g')
plt.xlim(-8,8)
plt.ylim(-8,8)
plt.show()
plt.quiver( 0,0, 2,3, scale_units='xy', angles = 'xy', scale=1, color= 'r')
plt.quiver( 0,0, 5,-2, scale_units='xy', angles = 'xy', scale=1, color= 'b')
plt.quiver( 0,0, 3,-5, scale_units='xy', angles = 'xy', scale=1, color= 'g')
plt.xlim(-8,8)
plt.ylim(-8,8)
plt.show()

# Subtraction of vectors
vec3 = np.asarray([0,0, 2,3])
vec4 = np.asarray([0,0, 5,-2])
vec_sub = vec2 - vec1
print(vec_sub)
lt.quiver(0,0, 2,3, scale_units = 'xy', angles = 'xy', scale = 1, color = 'r')
plt.quiver(0,0, 5,-2, scale_units = 'xy', angles = 'xy', scale = 1, color = 'g')
plt.quiver(0,0, 3,-5, scale_units = 'xy', angles = 'xy', scale = 1, color = 'b')
plt.xlim(-9,9)
plt.ylim(-9,9)
plt.show()


# Multiplication of Vectors

# Cross Product of 3 values
vec3 = np.asarray([2,3])
vec4 = np.asarray([5,-2])
result = np.cross(vec3, vec4)
print( result)

# Cross Product of 3 values
vec7 = np.asarray([2,4,3])
vec8 = np.asarray([6,0,-2])
_result = np.cross(vec7, vec8)
print( _result)

# Dot Product
vec5 = np.asarray([4,3])
vec6 = np.asarray([6,-2])
result_ = np.dot(vec3, vec4)
print( result_)

# Projection of 'a' vector on 'v' vector
a = np.array([2,5])
v = np.array([8,-6])

# Magnitude of v
magnitude_of_v = np.sqrt(sum(v**2) )
# Projection of 'a' on 'v'
ans = ( ( np.dot(a,v) ) / ( magnitude_of_v**2 ) ) * v
print("Projection of 'a' on 'v' is ",ans )

# Scaler Vs Vector Vs Matrics
# Scaler-> a single number
# Vector-> Lists of numbers( only one row or only one column )
# Metrix-> Multiple rows and columns ( More than one row and column )
